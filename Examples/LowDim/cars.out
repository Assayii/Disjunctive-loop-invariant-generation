---------------------------------------------------
 Local invariants to be generated : 1
 Increasing invariants to be generated : 1
 Strategy ID #2
 # of initial propagation steps:5
 Weave Time allowed:360000
 Cousot-Halbwachs to be performed:1
 BHRZ03 to be performed:1
----------------------------------------------------

1.
The locations read in are:

Location:l0
# of variables7
 Initial Condition: [[ 

1*t   = 0 
1*v1 -2*v2 +1*v3   = 0 
1*x3  + 50  = 0 
1*x2 -75  = 0 
1*x1 -100  = 0 
-1*v1  + 5 >= 0
1*v1 -1*v2  >= 0
-1*v1 +2*v2  >= 0

]]
 Invariant: [[ 

True

]]

Dualizing....(in location)

- 1.Before remove_higher_space_dimension(nd), result(based on cs) is : 
B + D + F + N - P = 0, 2*B + D + 2*N - O = 0, A - M = 0, C - L = 0, E - K = 0, F - J = 0, G - I = 0, B + D + F + N >= 0, 2*B + D + 2*N >= 0, N >= 0, 100*A + 75*C - 50*E + H - 5*N >= 0

- 2.After remove_higher_space_dimension(nd), result(based on cs) is : 
200*A + 10*B + 150*C + 5*D - 100*E + 2*H >= 0, 100*A + 5*B + 75*C + 5*D - 50*E + 5*F + H >= 0, 100*A + 75*C - 50*E + H >= 0
----------------------------------------------

2.
The transitions read in are::

Transition Relation
Name: t0
Pre-Location:l0  Post-Location:l0
Transition Relation [[
1*t -1*`t  + 1  = 0 
1*v3 -1*`v3   = 0 
1*x3 +1*v3 -1*`x3   = 0 
1*v2 -1*`v2 -1  = 0 
1*x2 +1*v2 -1*`x2   = 0 
1*v1 -1*`v1   = 0 
1*x1 +1*v1 -1*`x1   = 0 
-1*x1 +2*x2 -1*x3  >= 0
1*v2  + 5 >= 0
-1*v2  + 5 >= 0
 ]]
Guard [[
-1*x1 +2*x2 -1*x3  >= 0
-1*v2  + 5 >= 0
1*v2  + 5 >= 0
 ]]
Update [[
1*t -1*`t  + 1  = 0 
1*x3 +1*v3 -1*`x3   = 0 
1*v2 -1*`v2 -1  = 0 
1*x2 +1*v2 -1*`x2   = 0 
1*x1 +1*v1 -1*`x1   = 0 
 ]]
Preserved [[
  v1    v3  ]]
Transition Relation Ends

Dualizing....(in transitionrelation)
After remove_higher_space_dimensions: 
polyd is: G - O = 0, A - E - I + M = 0, B - I - J = 0, 2*A + C - 2*I - K = 0, A - E + F - I - N = 0, A - I >= 0, -10*A - 5*C + 5*D + G - H + 10*I - 6*L + P >= 0, 10*A + 5*C - 5*D + G - H - 10*I + 4*L + P >= 0
After cs=polyd.minimized_constraints: 
cs is: G - O = 0
cs is: A - E - I + M = 0
cs is: B - I - J = 0
cs is: 2*A + C - 2*I - K = 0
cs is: A - E + F - I - N = 0
cs is: A - I >= 0
cs is: -10*A - 5*C + 5*D + G - H + 10*I - 6*L + P >= 0
cs is: 10*A + 5*C - 5*D + G - H - 10*I + 4*L + P >= 0
Transition Relation
Name: t1
Pre-Location:l0  Post-Location:l0
Transition Relation [[
1*t -1*`t  + 1  = 0 
1*v3 -1*`v3   = 0 
1*x3 +1*v3 -1*`x3   = 0 
1*v2 -1*`v2  + 1  = 0 
1*x2 +1*v2 -1*`x2   = 0 
1*v1 -1*`v1   = 0 
1*x1 +1*v1 -1*`x1   = 0 
1*v2  + 5 >= 0
1*x1 -2*x2 +1*x3  >= 0
-1*v2  + 5 >= 0
 ]]
Guard [[
-1*v2  + 5 >= 0
1*x1 -2*x2 +1*x3  >= 0
1*v2  + 5 >= 0
 ]]
Update [[
1*t -1*`t  + 1  = 0 
1*x3 +1*v3 -1*`x3   = 0 
1*v2 -1*`v2  + 1  = 0 
1*x2 +1*v2 -1*`x2   = 0 
1*x1 +1*v1 -1*`x1   = 0 
 ]]
Preserved [[
  v1    v3  ]]
Transition Relation Ends

Dualizing....(in transitionrelation)
After remove_higher_space_dimensions: 
polyd is: G - O = 0, A - E - I + M = 0, B - I - J = 0, 2*A + C - 2*I - K = 0, A - E + F - I - N = 0, -A + I >= 0, -10*A - 5*C + 5*D - H + 10*I - 4*L + O + P >= 0, 10*A + 5*C - 5*D - H - 10*I + 6*L + O + P >= 0
After cs=polyd.minimized_constraints: 
cs is: G - O = 0
cs is: A - E - I + M = 0
cs is: B - I - J = 0
cs is: 2*A + C - 2*I - K = 0
cs is: A - E + F - I - N = 0
cs is: -A + I >= 0
cs is: -10*A - 5*C + 5*D - H + 10*I - 4*L + O + P >= 0
cs is: 10*A + 5*C - 5*D - H - 10*I + 6*L + O + P >= 0
----------------------------------------------

3.

In factorizing_strategy_equalities(): 

In split_on_factor_equlities(LinTransform & lt): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t0 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t0 -1 ) * ( 1*c_l0_0-1*c_l0_4 ) 

Expression is: M_t0 * (1*c_l0_1 )+M_t1* (  0  )  + -1*c_l0_0-1*c_l0_1  

Expression is: ( 1*M_t0 -1 ) * ( 2*c_l0_0+1*c_l0_2 ) 

Expression is: M_t0 * (1*c_l0_0-1*c_l0_4+1*c_l0_5 )+M_t1* (  0  )  + -1*c_l0_0-1*c_l0_5  

Expression is: M_t0 * ( 0  )+M_t1* (  0  )  + -1*c_l0_0  

In (*vi).is_pure_a(): 

(*vi).convert_linear() is: -1*c_l0_0

Expression is: M_t0 * ( 0  )+M_t1* (  0  )  + -1*c_l0_4  

In (*vi).is_pure_a(): 

(*vi).convert_linear() is: -1*c_l0_4

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t0 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t0 -1 ) * ( 1*c_l0_0-1*c_l0_4 ) 

Expression is: M_t0 * (1*c_l0_2 )+M_t1* (  0  )  + -1*c_l0_2  

Expression is: ( 1*M_t0 -1 ) * ( 2*c_l0_0+1*c_l0_2 ) 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t0 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t0 -1 ) * ( 1*c_l0_0-1*c_l0_4 ) 

Expression is: M_t0 * (1*c_l0_2 )+M_t1* (  0  )  + -1*c_l0_2  

Expression is: ( 1*M_t0 -1 ) * ( 2*c_l0_0+1*c_l0_2 ) 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t0 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t0 -1 ) * ( 1*c_l0_0-1*c_l0_4 ) 

Expression is: M_t0 * (1*c_l0_1 )+M_t1* (  0  )  + -1*c_l0_0-1*c_l0_1  

Expression is: ( 1*M_t0 -1 ) * ( 2*c_l0_0+1*c_l0_2 ) 

Expression is: M_t0 * (1*c_l0_0-1*c_l0_4+1*c_l0_5 )+M_t1* (  0  )  + -1*c_l0_0-1*c_l0_5  

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_0-1*c_l0_4 ) 

Expression is: ( 1*M_t1 -1 ) * ( 2*c_l0_0+1*c_l0_2 ) 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In split_on_factor_equlities(LinTransform & lt): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In factorizing_strategy_equalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t0 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t0 -1 ) * ( 1*c_l0_0-1*c_l0_4 ) 

Expression is: M_t0 * ( 0  )+M_t1* ( 1*c_l0_1 )  + -1*c_l0_1-1*c_l0_4  

Expression is: ( 1*M_t0 -1 ) * ( 2*c_l0_0+1*c_l0_2 ) 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: M_t0 * ( 0  )+M_t1* (  0  )  + -1*c_l0_1-1*c_l0_4  

In (*vi).is_pure_a(): 

(*vi).convert_linear() is: -1*c_l0_1-1*c_l0_4

Expression is: M_t0 * ( 0  )+M_t1* (  0  )  + -1*c_l0_4-1*c_l0_5  

In (*vi).is_pure_a(): 

(*vi).convert_linear() is: -1*c_l0_4-1*c_l0_5

Expression is: M_t0 * ( 0  )+M_t1* ( 1*c_l0_1 )  + -1*c_l0_1-1*c_l0_4  

Expression is: M_t0 * ( 0  )+M_t1* ( 1*c_l0_5 )  + -1*c_l0_4-1*c_l0_5  

In move_constraints()

In move_constraints_equalities(): 

Expression is: M_t0 * ( 0  )+M_t1* ( 1*c_l0_5 )  +  0   

Expression is: M_t0 * ( 0  )+M_t1* ( 1*c_l0_5 )  +  0   

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: M_t0 * ( 0  )+M_t1* ( 1*c_l0_5 )  +  0   

Expression is: M_t0 * ( 0  )+M_t1* ( 1*c_l0_5 )  +  0   

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In split_on_factor_equlities(LinTransform & lt): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In factorizing_strategy_equalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: M_t0 * ( 0  )+M_t1* (  0  )  + -1*c_l0_4  

In (*vi).is_pure_a(): 

(*vi).convert_linear() is: -1*c_l0_4

Expression is: M_t0 * ( 0  )+M_t1* (  0  )  + -1*c_l0_4  

In (*vi).is_pure_a(): 

(*vi).convert_linear() is: -1*c_l0_4

Expression is: M_t0 * ( 0  )+M_t1* ( 1*c_l0_1 )  + -1*c_l0_1-1*c_l0_4  

Expression is: M_t0 * ( 0  )+M_t1* ( 1*c_l0_5 )  + -1*c_l0_4-1*c_l0_5  

In move_constraints()

In move_constraints_equalities(): 

Expression is: M_t0 * ( 0  )+M_t1* ( 1*c_l0_1 )  + -1*c_l0_1  

Expression is: M_t0 * ( 0  )+M_t1* ( 1*c_l0_5 )  + -1*c_l0_5  

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: M_t0 * ( 0  )+M_t1* ( 1*c_l0_1 )  + -1*c_l0_1  

Expression is: M_t0 * ( 0  )+M_t1* ( 1*c_l0_5 )  + -1*c_l0_5  

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In split_on_factor_equlities(LinTransform & lt): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 
Location::l0 pushing back clump with 2 Polyhedra

In add_clump, the new clump cl is ... 

clump_poly_count is 1
E = 0, A = 0, -5*C - D + G >= 0, -5*C + D + G >= 0, 5*C - D + G >= 0, 5*C + D + G >= 0, 75*C + H >= 0, 5*B + 75*C + 5*D + 5*F + H >= 0, 10*B + 150*C + 5*D + 2*H >= 0

clump_poly_count is 2
G = 0, F = 0, E = 0, C = 0, B = 0, A = 0, -6*D + H >= 0, 6*D + H >= 0
... done
----------------------------------------------

4.

- In extract_invariant_and_update(C_Polyhedron & pp, & dualp) : 

- For location l0

- pp is E = 0, A = 0, 5*B + 75*C + 5*D + 5*F + H >= 0, 10*B + 150*C + 5*D + 2*H >= 0, 75*C + H >= 0, -5*C - D + G >= 0, -5*C + D + G >= 0, 5*C - D + G >= 0, 5*C + D + G >= 0

- pp.minimized_generators() is p(0), r(C + 5*G - 75*H), r(-B + 2*D - F + 2*G), r(-C + 5*G + 75*H), r(B - 2*D + F + 2*G), r(-B + 5*H), r(F), r(B - F)

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is p(0)

- g.space_dimension() is 8

- Variable(7) is H
- g.coefficient(H) is 0
- lin is 0

- Variable(6) is G
- g.coefficient(G) is 0
- lin is 0

- Variable(5) is F
- g.coefficient(F) is 0
- lin is 0

- Variable(4) is E
- g.coefficient(E) is 0
- lin is 0

- Variable(3) is D
- g.coefficient(D) is 0
- lin is 0

- Variable(2) is C
- g.coefficient(C) is 0
- lin is 0

- Variable(1) is B
- g.coefficient(B) is 0
- lin is 0

- Variable(0) is A
- g.coefficient(A) is 0
- lin is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(0) is A
- l is 0
- i is 0
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(1) is B
- l is 0
- i is 1
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(2) is C
- l is 0
- i is 2
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(3) is D
- l is 0
- i is 3
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(4) is E
- l is 0
- i is 4
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(5) is F
- l is 0
- i is 5
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(6) is G
- l is 0
- i is 6
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(7) is H
- l is 0
- n is 7
- c is 0
- lin1 is 0
l0=>0(add_to_invariant!)>=0
invariant is true

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is r(C + 5*G - 75*H)

- g.space_dimension() is 8

- Variable(7) is H
- g.coefficient(H) is -75
- lin is -75*H

- Variable(6) is G
- g.coefficient(G) is 5
- lin is 5*G - 75*H

- Variable(5) is F
- g.coefficient(F) is 0
- lin is 5*G - 75*H

- Variable(4) is E
- g.coefficient(E) is 0
- lin is 5*G - 75*H

- Variable(3) is D
- g.coefficient(D) is 0
- lin is 5*G - 75*H

- Variable(2) is C
- g.coefficient(C) is 1
- lin is C + 5*G - 75*H

- Variable(1) is B
- g.coefficient(B) is 0
- lin is C + 5*G - 75*H

- Variable(0) is A
- g.coefficient(A) is 0
- lin is C + 5*G - 75*H

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(0) is A
- l is 0
- i is 0
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(1) is B
- l is 0
- i is 1
- c is 0
- lin1 is 0

- handle_integers(1) is 1
- lin.coefficient(Variable(l+i)) is 1
- Variable(2) is C
- l is 0
- i is 2
- c is 1
- lin1 is C

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(3) is D
- l is 0
- i is 3
- c is 0
- lin1 is C

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(4) is E
- l is 0
- i is 4
- c is 0
- lin1 is C

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(5) is F
- l is 0
- i is 5
- c is 0
- lin1 is C

- handle_integers(5) is 1
- lin.coefficient(Variable(l+i)) is 5
- Variable(6) is G
- l is 0
- i is 6
- c is 5
- lin1 is C + 5*G

- handle_integers(-75) is 1
- lin.coefficient(Variable(l+i)) is -75
- Variable(7) is H
- l is 0
- n is 7
- c is -75
- lin1 is C + 5*G - 75
l0=>1*x2 +5*t -75(add_to_invariant!)>=0
invariant is C + 5*G >= 75

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is r(-B + 2*D - F + 2*G)

- g.space_dimension() is 8

- Variable(7) is H
- g.coefficient(H) is 0
- lin is 0

- Variable(6) is G
- g.coefficient(G) is 2
- lin is 2*G

- Variable(5) is F
- g.coefficient(F) is -1
- lin is -F + 2*G

- Variable(4) is E
- g.coefficient(E) is 0
- lin is -F + 2*G

- Variable(3) is D
- g.coefficient(D) is 2
- lin is 2*D - F + 2*G

- Variable(2) is C
- g.coefficient(C) is 0
- lin is 2*D - F + 2*G

- Variable(1) is B
- g.coefficient(B) is -1
- lin is -B + 2*D - F + 2*G

- Variable(0) is A
- g.coefficient(A) is 0
- lin is -B + 2*D - F + 2*G

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(0) is A
- l is 0
- i is 0
- c is 0
- lin1 is 0

- handle_integers(-1) is 1
- lin.coefficient(Variable(l+i)) is -1
- Variable(1) is B
- l is 0
- i is 1
- c is -1
- lin1 is -B

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(2) is C
- l is 0
- i is 2
- c is 0
- lin1 is -B

- handle_integers(2) is 1
- lin.coefficient(Variable(l+i)) is 2
- Variable(3) is D
- l is 0
- i is 3
- c is 2
- lin1 is -B + 2*D

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(4) is E
- l is 0
- i is 4
- c is 0
- lin1 is -B + 2*D

- handle_integers(-1) is 1
- lin.coefficient(Variable(l+i)) is -1
- Variable(5) is F
- l is 0
- i is 5
- c is -1
- lin1 is -B + 2*D - F

- handle_integers(2) is 1
- lin.coefficient(Variable(l+i)) is 2
- Variable(6) is G
- l is 0
- i is 6
- c is 2
- lin1 is -B + 2*D - F + 2*G

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(7) is H
- l is 0
- n is 7
- c is 0
- lin1 is -B + 2*D - F + 2*G
l0=>-1*v1 +2*v2 -1*v3 +2*t (add_to_invariant!)>=0
invariant is C + 5*G >= 75, -B + 2*D - F + 2*G >= 0

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is r(-C + 5*G + 75*H)

- g.space_dimension() is 8

- Variable(7) is H
- g.coefficient(H) is 75
- lin is 75*H

- Variable(6) is G
- g.coefficient(G) is 5
- lin is 5*G + 75*H

- Variable(5) is F
- g.coefficient(F) is 0
- lin is 5*G + 75*H

- Variable(4) is E
- g.coefficient(E) is 0
- lin is 5*G + 75*H

- Variable(3) is D
- g.coefficient(D) is 0
- lin is 5*G + 75*H

- Variable(2) is C
- g.coefficient(C) is -1
- lin is -C + 5*G + 75*H

- Variable(1) is B
- g.coefficient(B) is 0
- lin is -C + 5*G + 75*H

- Variable(0) is A
- g.coefficient(A) is 0
- lin is -C + 5*G + 75*H

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(0) is A
- l is 0
- i is 0
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(1) is B
- l is 0
- i is 1
- c is 0
- lin1 is 0

- handle_integers(-1) is 1
- lin.coefficient(Variable(l+i)) is -1
- Variable(2) is C
- l is 0
- i is 2
- c is -1
- lin1 is -C

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(3) is D
- l is 0
- i is 3
- c is 0
- lin1 is -C

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(4) is E
- l is 0
- i is 4
- c is 0
- lin1 is -C

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(5) is F
- l is 0
- i is 5
- c is 0
- lin1 is -C

- handle_integers(5) is 1
- lin.coefficient(Variable(l+i)) is 5
- Variable(6) is G
- l is 0
- i is 6
- c is 5
- lin1 is -C + 5*G

- handle_integers(75) is 1
- lin.coefficient(Variable(l+i)) is 75
- Variable(7) is H
- l is 0
- n is 7
- c is 75
- lin1 is -C + 5*G + 75
l0=>-1*x2 +5*t  + 75(add_to_invariant!)>=0
invariant is -B + 2*D - F + 2*G >= 0, C + 5*G >= 75, -C + 5*G >= -75

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is r(B - 2*D + F + 2*G)

- g.space_dimension() is 8

- Variable(7) is H
- g.coefficient(H) is 0
- lin is 0

- Variable(6) is G
- g.coefficient(G) is 2
- lin is 2*G

- Variable(5) is F
- g.coefficient(F) is 1
- lin is F + 2*G

- Variable(4) is E
- g.coefficient(E) is 0
- lin is F + 2*G

- Variable(3) is D
- g.coefficient(D) is -2
- lin is -2*D + F + 2*G

- Variable(2) is C
- g.coefficient(C) is 0
- lin is -2*D + F + 2*G

- Variable(1) is B
- g.coefficient(B) is 1
- lin is B - 2*D + F + 2*G

- Variable(0) is A
- g.coefficient(A) is 0
- lin is B - 2*D + F + 2*G

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(0) is A
- l is 0
- i is 0
- c is 0
- lin1 is 0

- handle_integers(1) is 1
- lin.coefficient(Variable(l+i)) is 1
- Variable(1) is B
- l is 0
- i is 1
- c is 1
- lin1 is B

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(2) is C
- l is 0
- i is 2
- c is 0
- lin1 is B

- handle_integers(-2) is 1
- lin.coefficient(Variable(l+i)) is -2
- Variable(3) is D
- l is 0
- i is 3
- c is -2
- lin1 is B - 2*D

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(4) is E
- l is 0
- i is 4
- c is 0
- lin1 is B - 2*D

- handle_integers(1) is 1
- lin.coefficient(Variable(l+i)) is 1
- Variable(5) is F
- l is 0
- i is 5
- c is 1
- lin1 is B - 2*D + F

- handle_integers(2) is 1
- lin.coefficient(Variable(l+i)) is 2
- Variable(6) is G
- l is 0
- i is 6
- c is 2
- lin1 is B - 2*D + F + 2*G

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(7) is H
- l is 0
- n is 7
- c is 0
- lin1 is B - 2*D + F + 2*G
l0=>1*v1 -2*v2 +1*v3 +2*t (add_to_invariant!)>=0
invariant is -B + 2*D - F + 2*G >= 0, -C + 5*G >= -75, C + 5*G >= 75, B - 2*D + F + 2*G >= 0

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is r(-B + 5*H)

- g.space_dimension() is 8

- Variable(7) is H
- g.coefficient(H) is 5
- lin is 5*H

- Variable(6) is G
- g.coefficient(G) is 0
- lin is 5*H

- Variable(5) is F
- g.coefficient(F) is 0
- lin is 5*H

- Variable(4) is E
- g.coefficient(E) is 0
- lin is 5*H

- Variable(3) is D
- g.coefficient(D) is 0
- lin is 5*H

- Variable(2) is C
- g.coefficient(C) is 0
- lin is 5*H

- Variable(1) is B
- g.coefficient(B) is -1
- lin is -B + 5*H

- Variable(0) is A
- g.coefficient(A) is 0
- lin is -B + 5*H

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(0) is A
- l is 0
- i is 0
- c is 0
- lin1 is 0

- handle_integers(-1) is 1
- lin.coefficient(Variable(l+i)) is -1
- Variable(1) is B
- l is 0
- i is 1
- c is -1
- lin1 is -B

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(2) is C
- l is 0
- i is 2
- c is 0
- lin1 is -B

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(3) is D
- l is 0
- i is 3
- c is 0
- lin1 is -B

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(4) is E
- l is 0
- i is 4
- c is 0
- lin1 is -B

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(5) is F
- l is 0
- i is 5
- c is 0
- lin1 is -B

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(6) is G
- l is 0
- i is 6
- c is 0
- lin1 is -B

- handle_integers(5) is 1
- lin.coefficient(Variable(l+i)) is 5
- Variable(7) is H
- l is 0
- n is 7
- c is 5
- lin1 is -B + 5
l0=>-1*v1  + 5(add_to_invariant!)>=0
invariant is -B + 2*D - F + 2*G >= 0, -C + 5*G >= -75, C + 5*G >= 75, B - 2*D + F + 2*G >= 0, -B >= -5

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is r(F)

- g.space_dimension() is 8

- Variable(7) is H
- g.coefficient(H) is 0
- lin is 0

- Variable(6) is G
- g.coefficient(G) is 0
- lin is 0

- Variable(5) is F
- g.coefficient(F) is 1
- lin is F

- Variable(4) is E
- g.coefficient(E) is 0
- lin is F

- Variable(3) is D
- g.coefficient(D) is 0
- lin is F

- Variable(2) is C
- g.coefficient(C) is 0
- lin is F

- Variable(1) is B
- g.coefficient(B) is 0
- lin is F

- Variable(0) is A
- g.coefficient(A) is 0
- lin is F

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(0) is A
- l is 0
- i is 0
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(1) is B
- l is 0
- i is 1
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(2) is C
- l is 0
- i is 2
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(3) is D
- l is 0
- i is 3
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(4) is E
- l is 0
- i is 4
- c is 0
- lin1 is 0

- handle_integers(1) is 1
- lin.coefficient(Variable(l+i)) is 1
- Variable(5) is F
- l is 0
- i is 5
- c is 1
- lin1 is F

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(6) is G
- l is 0
- i is 6
- c is 0
- lin1 is F

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(7) is H
- l is 0
- n is 7
- c is 0
- lin1 is F
l0=>1*v3 (add_to_invariant!)>=0
invariant is -B >= -5, -B + 2*D - F + 2*G >= 0, -C + 5*G >= -75, C + 5*G >= 75, B - 2*D + F + 2*G >= 0, F >= 0

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is r(B - F)

- g.space_dimension() is 8

- Variable(7) is H
- g.coefficient(H) is 0
- lin is 0

- Variable(6) is G
- g.coefficient(G) is 0
- lin is 0

- Variable(5) is F
- g.coefficient(F) is -1
- lin is -F

- Variable(4) is E
- g.coefficient(E) is 0
- lin is -F

- Variable(3) is D
- g.coefficient(D) is 0
- lin is -F

- Variable(2) is C
- g.coefficient(C) is 0
- lin is -F

- Variable(1) is B
- g.coefficient(B) is 1
- lin is B - F

- Variable(0) is A
- g.coefficient(A) is 0
- lin is B - F

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(0) is A
- l is 0
- i is 0
- c is 0
- lin1 is 0

- handle_integers(1) is 1
- lin.coefficient(Variable(l+i)) is 1
- Variable(1) is B
- l is 0
- i is 1
- c is 1
- lin1 is B

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(2) is C
- l is 0
- i is 2
- c is 0
- lin1 is B

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(3) is D
- l is 0
- i is 3
- c is 0
- lin1 is B

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(4) is E
- l is 0
- i is 4
- c is 0
- lin1 is B

- handle_integers(-1) is 1
- lin.coefficient(Variable(l+i)) is -1
- Variable(5) is F
- l is 0
- i is 5
- c is -1
- lin1 is B - F

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(6) is G
- l is 0
- i is 6
- c is 0
- lin1 is B - F

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(7) is H
- l is 0
- n is 7
- c is 0
- lin1 is B - F
l0=>1*v1 -1*v3 (add_to_invariant!)>=0
invariant is -B >= -5, -B + 2*D - F + 2*G >= 0, -C + 5*G >= -75, B - F >= 0, F >= 0, C + 5*G >= 75, B - 2*D + F + 2*G >= 0

- In extract_invariant_and_update(C_Polyhedron & pp, & dualp) : 

- For location l0

- pp is G = 0, F = 0, E = 0, C = 0, B = 0, A = 0, 6*D + H >= 0, -6*D + H >= 0

- pp.minimized_generators() is p(0), r(D + 6*H), r(-D + 6*H)

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is p(0)

- g.space_dimension() is 8

- Variable(7) is H
- g.coefficient(H) is 0
- lin is 0

- Variable(6) is G
- g.coefficient(G) is 0
- lin is 0

- Variable(5) is F
- g.coefficient(F) is 0
- lin is 0

- Variable(4) is E
- g.coefficient(E) is 0
- lin is 0

- Variable(3) is D
- g.coefficient(D) is 0
- lin is 0

- Variable(2) is C
- g.coefficient(C) is 0
- lin is 0

- Variable(1) is B
- g.coefficient(B) is 0
- lin is 0

- Variable(0) is A
- g.coefficient(A) is 0
- lin is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(0) is A
- l is 0
- i is 0
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(1) is B
- l is 0
- i is 1
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(2) is C
- l is 0
- i is 2
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(3) is D
- l is 0
- i is 3
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(4) is E
- l is 0
- i is 4
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(5) is F
- l is 0
- i is 5
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(6) is G
- l is 0
- i is 6
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(7) is H
- l is 0
- n is 7
- c is 0
- lin1 is 0
l0=>0(add_to_invariant!)>=0
invariant is -B >= -5, -B + 2*D - F + 2*G >= 0, -C + 5*G >= -75, F >= 0, C + 5*G >= 75, B - 2*D + F + 2*G >= 0, B - F >= 0

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is r(D + 6*H)

- g.space_dimension() is 8

- Variable(7) is H
- g.coefficient(H) is 6
- lin is 6*H

- Variable(6) is G
- g.coefficient(G) is 0
- lin is 6*H

- Variable(5) is F
- g.coefficient(F) is 0
- lin is 6*H

- Variable(4) is E
- g.coefficient(E) is 0
- lin is 6*H

- Variable(3) is D
- g.coefficient(D) is 1
- lin is D + 6*H

- Variable(2) is C
- g.coefficient(C) is 0
- lin is D + 6*H

- Variable(1) is B
- g.coefficient(B) is 0
- lin is D + 6*H

- Variable(0) is A
- g.coefficient(A) is 0
- lin is D + 6*H

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(0) is A
- l is 0
- i is 0
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(1) is B
- l is 0
- i is 1
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(2) is C
- l is 0
- i is 2
- c is 0
- lin1 is 0

- handle_integers(1) is 1
- lin.coefficient(Variable(l+i)) is 1
- Variable(3) is D
- l is 0
- i is 3
- c is 1
- lin1 is D

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(4) is E
- l is 0
- i is 4
- c is 0
- lin1 is D

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(5) is F
- l is 0
- i is 5
- c is 0
- lin1 is D

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(6) is G
- l is 0
- i is 6
- c is 0
- lin1 is D

- handle_integers(6) is 1
- lin.coefficient(Variable(l+i)) is 6
- Variable(7) is H
- l is 0
- n is 7
- c is 6
- lin1 is D + 6
l0=>1*v2  + 6(add_to_invariant!)>=0
invariant is -B >= -5, -B + 2*D - F + 2*G >= 0, -C + 5*G >= -75, F >= 0, C + 5*G >= 75, B - 2*D + F + 2*G >= 0, B - F >= 0, D >= -6

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is r(-D + 6*H)

- g.space_dimension() is 8

- Variable(7) is H
- g.coefficient(H) is 6
- lin is 6*H

- Variable(6) is G
- g.coefficient(G) is 0
- lin is 6*H

- Variable(5) is F
- g.coefficient(F) is 0
- lin is 6*H

- Variable(4) is E
- g.coefficient(E) is 0
- lin is 6*H

- Variable(3) is D
- g.coefficient(D) is -1
- lin is -D + 6*H

- Variable(2) is C
- g.coefficient(C) is 0
- lin is -D + 6*H

- Variable(1) is B
- g.coefficient(B) is 0
- lin is -D + 6*H

- Variable(0) is A
- g.coefficient(A) is 0
- lin is -D + 6*H

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(0) is A
- l is 0
- i is 0
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(1) is B
- l is 0
- i is 1
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(2) is C
- l is 0
- i is 2
- c is 0
- lin1 is 0

- handle_integers(-1) is 1
- lin.coefficient(Variable(l+i)) is -1
- Variable(3) is D
- l is 0
- i is 3
- c is -1
- lin1 is -D

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(4) is E
- l is 0
- i is 4
- c is 0
- lin1 is -D

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(5) is F
- l is 0
- i is 5
- c is 0
- lin1 is -D

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(6) is G
- l is 0
- i is 6
- c is 0
- lin1 is -D

- handle_integers(6) is 1
- lin.coefficient(Variable(l+i)) is 6
- Variable(7) is H
- l is 0
- n is 7
- c is 6
- lin1 is -D + 6
l0=>-1*v2  + 6(add_to_invariant!)>=0
invariant is -B >= -5, -B + 2*D - F + 2*G >= 0, -C + 5*G >= -75, F >= 0, D >= -6, C + 5*G >= 75, B - 2*D + F + 2*G >= 0, B - F >= 0, -D >= -6
strategy ID 2 ending (num_context==2)
----------------------------------------------

5.
The locations read in are:

Location:l0
# of variables7
 Initial Condition: [[ 

1*t   = 0 
1*v1 -2*v2 +1*v3   = 0 
1*x3  + 50  = 0 
1*x2 -75  = 0 
1*x1 -100  = 0 
-1*v1  + 5 >= 0
1*v1 -1*v2  >= 0
-1*v1 +2*v2  >= 0

]]
 Invariant: [[ 

-1*v1  + 5 >= 0
-1*v1 +2*v2 -1*v3 +2*t  >= 0
-1*x2 +5*t  + 75 >= 0
1*v3  >= 0
1*v2  + 6 >= 0
1*x2 +5*t -75 >= 0
1*v1 -2*v2 +1*v3 +2*t  >= 0
1*v1 -1*v3  >= 0
-1*v2  + 6 >= 0

]]
----------------------------------------------
 # of Contexts generated =13
 # pruned by inclusion tests = 6
 # of invariants *weav*ed=2
 #  *bang*ed=0
 # Pruned in Cump.cc =0
 Time Taken (0.01S)=1


 Doing Initial Propagation
Propagation done -- Time Taken (0.01S):1
---- Running Cousot-Halbwachs with H79 widening ----
