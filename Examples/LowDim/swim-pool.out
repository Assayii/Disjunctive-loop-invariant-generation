IN yyparse-------------------------
l0
0x561979eb8270
Location:l0
# of variables9
 [ no initial condition set]
 Invariant: [[ 

True

]]

Location:l0
# of variables9
 [ no initial condition set]
 Invariant: [[ 

True

]]

line 1479
H >= 1

line 1463

I >= 1

H >= 1

I >= 1, H >= 1

line 1463

I >= 1, H >= 1

G - I = 0

G - I = 0, G >= 1, H >= 1

line 1463

G - I = 0, G >= 1, H >= 1

F - H = 0

G - I = 0, F - H = 0, F >= 1, G >= 1

line 1463

G - I = 0, F - H = 0, F >= 1, G >= 1

E = 0

G - I = 0, F - H = 0, E = 0, G >= 1, F >= 1

line 1463

G - I = 0, F - H = 0, E = 0, G >= 1, F >= 1

D = 0

G - I = 0, F - H = 0, E = 0, D = 0, G >= 1, F >= 1

line 1463

G - I = 0, F - H = 0, E = 0, D = 0, G >= 1, F >= 1

C = 0

G - I = 0, F - H = 0, E = 0, D = 0, C = 0, G >= 1, F >= 1

line 1463

G - I = 0, F - H = 0, E = 0, D = 0, C = 0, G >= 1, F >= 1

B = 0

G - I = 0, F - H = 0, E = 0, D = 0, C = 0, B = 0, G >= 1, F >= 1

line 1463

G - I = 0, F - H = 0, E = 0, D = 0, C = 0, B = 0, G >= 1, F >= 1

A = 0

G - I = 0, F - H = 0, E = 0, D = 0, C = 0, B = 0, A = 0, G >= 1, F >= 1

line 2281
Location:l0
# of variables9
 Initial Condition: [[ 

1*x7 -1*q   = 0 
1*x6 -1*p   = 0 
1*x5   = 0 
1*x4   = 0 
1*x3   = 0 
1*x2   = 0 
1*x1   = 0 
1*x7 -1 >= 0
1*x6 -1 >= 0

]]
 Invariant: [[ 

True

]]

l0
G - I = 0, F - H = 0, E = 0, D = 0, C = 0, B = 0, A = 0, G >= 1, F >= 1
G - I = 0, F - H = 0, E = 0, D = 0, C = 0, B = 0, A = 0, G >= 1, F >= 1
 [[ 
x1  ,  x2  ,  x3  ,  x4  ,  x5  ,  x6  ,  x7  ,  p  ,  q  ,  ]]
---------------------------------------------------
 Local invariants to be generated : 1
 Increasing invariants to be generated : 1
 Strategy ID #2
 # of initial propagation steps:2
 Weave Time allowed:360000
 Cousot-Halbwachs to be performed:1
 BHRZ03 to be performed:1
----------------------------------------------------

1.
The locations read in are:

Location:l0
# of variables9
 Initial Condition: [[ 

1*x7 -1*q   = 0 
1*x6 -1*p   = 0 
1*x5   = 0 
1*x4   = 0 
1*x3   = 0 
1*x2   = 0 
1*x1   = 0 
1*x7 -1 >= 0
1*x6 -1 >= 0

]]
 Invariant: [[ 

True

]]

Dualizing....(in location)

- 1.Before remove_higher_space_dimension(nd), result(based on cs) is : 
F + H - S = 0, G + I - R = 0, A - Q = 0, B - P = 0, C - O = 0, D - N = 0, E - M = 0, H + L = 0, I + K = 0, F + H >= 0, G + I >= 0, F + G + H + I + J >= 0

- 2.After remove_higher_space_dimension(nd), result(based on cs) is : 
F + H >= 0, G + I >= 0, F + G + H + I + J >= 0
----------------------------------------------

2.
The transitions read in are::

Transition Relation
Name: t1
Pre-Location:l0  Post-Location:l0
Transition Relation [[
1*q -1*`q   = 0 
1*p -1*`p   = 0 
1*x7 -1*`x7   = 0 
1*x6 -1*`x6 -1  = 0 
1*x5 -1*`x5   = 0 
1*x4 -1*`x4   = 0 
1*x3 -1*`x3   = 0 
1*x2 -1*`x2   = 0 
1*x1 -1*`x1  + 1  = 0 
1*x6 -1 >= 0
 ]]
Guard [[
1*x6 -1 >= 0
 ]]
Update [[
1*x6 -1*`x6 -1  = 0 
1*x1 -1*`x1  + 1  = 0 
 ]]
Preserved [[
  x2    x3    x4    x5    x7    p    q  ]]
Transition Relation Ends

Dualizing....(in transitionrelation)
After remove_higher_space_dimensions: 
polyd is: I - S = 0, A - K = 0, B - L = 0, C - M = 0, D - N = 0, E - O = 0, G - Q = 0, H - R = 0, -F + P >= 0, A - F - J + T >= 0
After cs=polyd.minimized_constraints: 
cs is: I - S = 0
cs is: A - K = 0
cs is: B - L = 0
cs is: C - M = 0
cs is: D - N = 0
cs is: E - O = 0
cs is: G - Q = 0
cs is: H - R = 0
cs is: -F + P >= 0
cs is: A - F - J + T >= 0
Transition Relation
Name: t2
Pre-Location:l0  Post-Location:l0
Transition Relation [[
1*q -1*`q   = 0 
1*p -1*`p   = 0 
1*x7 -1*`x7 -1  = 0 
1*x6 -1*`x6   = 0 
1*x5 -1*`x5   = 0 
1*x4 -1*`x4   = 0 
1*x3 -1*`x3   = 0 
1*x2 -1*`x2  + 1  = 0 
1*x1 -1*`x1 -1  = 0 
1*x7 -1 >= 0
1*x1 -1 >= 0
 ]]
Guard [[
1*x7 -1 >= 0
1*x1 -1 >= 0
 ]]
Update [[
1*x7 -1*`x7 -1  = 0 
1*x2 -1*`x2  + 1  = 0 
1*x1 -1*`x1 -1  = 0 
 ]]
Preserved [[
  x3    x4    x5    x6    p    q  ]]
Transition Relation Ends

Dualizing....(in transitionrelation)
After remove_higher_space_dimensions: 
polyd is: I - S = 0, C - M = 0, D - N = 0, E - O = 0, F - P = 0, B - L = 0, H - R = 0, -A + B - G - J + T >= 0, -G + Q >= 0, -A + K >= 0
After cs=polyd.minimized_constraints: 
cs is: I - S = 0
cs is: C - M = 0
cs is: D - N = 0
cs is: E - O = 0
cs is: F - P = 0
cs is: B - L = 0
cs is: H - R = 0
cs is: -A + B - G - J + T >= 0
cs is: -G + Q >= 0
cs is: -A + K >= 0
Transition Relation
Name: t3
Pre-Location:l0  Post-Location:l0
Transition Relation [[
1*q -1*`q   = 0 
1*p -1*`p   = 0 
1*x7 -1*`x7   = 0 
1*x6 -1*`x6  + 1  = 0 
1*x5 -1*`x5   = 0 
1*x4 -1*`x4   = 0 
1*x3 -1*`x3  + 1  = 0 
1*x2 -1*`x2 -1  = 0 
1*x1 -1*`x1   = 0 
1*x2 -1 >= 0
 ]]
Guard [[
1*x2 -1 >= 0
 ]]
Update [[
1*x6 -1*`x6  + 1  = 0 
1*x3 -1*`x3  + 1  = 0 
1*x2 -1*`x2 -1  = 0 
 ]]
Preserved [[
  x1    x4    x5    x7    p    q  ]]
Transition Relation Ends

Dualizing....(in transitionrelation)
After remove_higher_space_dimensions: 
polyd is: F - P = 0, A - K = 0, I - S = 0, C - M = 0, D - N = 0, E - O = 0, G - Q = 0, H - R = 0, -B + C + F - J + T >= 0, -B + L >= 0
After cs=polyd.minimized_constraints: 
cs is: F - P = 0
cs is: A - K = 0
cs is: I - S = 0
cs is: C - M = 0
cs is: D - N = 0
cs is: E - O = 0
cs is: G - Q = 0
cs is: H - R = 0
cs is: -B + C + F - J + T >= 0
cs is: -B + L >= 0
Transition Relation
Name: t4
Pre-Location:l0  Post-Location:l0
Transition Relation [[
1*q -1*`q   = 0 
1*p -1*`p   = 0 
1*x7 -1*`x7   = 0 
1*x6 -1*`x6 -1  = 0 
1*x5 -1*`x5   = 0 
1*x4 -1*`x4  + 1  = 0 
1*x3 -1*`x3 -1  = 0 
1*x2 -1*`x2   = 0 
1*x1 -1*`x1   = 0 
1*x6 -1 >= 0
1*x3 -1 >= 0
 ]]
Guard [[
1*x6 -1 >= 0
1*x3 -1 >= 0
 ]]
Update [[
1*x6 -1*`x6 -1  = 0 
1*x4 -1*`x4  + 1  = 0 
1*x3 -1*`x3 -1  = 0 
 ]]
Preserved [[
  x1    x2    x5    x7    p    q  ]]
Transition Relation Ends

Dualizing....(in transitionrelation)
After remove_higher_space_dimensions: 
polyd is: I - S = 0, A - K = 0, B - L = 0, E - O = 0, D - N = 0, G - Q = 0, H - R = 0, -C + D - F - J + T >= 0, -F + P >= 0, -C + M >= 0
After cs=polyd.minimized_constraints: 
cs is: I - S = 0
cs is: A - K = 0
cs is: B - L = 0
cs is: E - O = 0
cs is: D - N = 0
cs is: G - Q = 0
cs is: H - R = 0
cs is: -C + D - F - J + T >= 0
cs is: -F + P >= 0
cs is: -C + M >= 0
Transition Relation
Name: t5
Pre-Location:l0  Post-Location:l0
Transition Relation [[
1*q -1*`q   = 0 
1*p -1*`p   = 0 
1*x7 -1*`x7  + 1  = 0 
1*x6 -1*`x6   = 0 
1*x5 -1*`x5  + 1  = 0 
1*x4 -1*`x4 -1  = 0 
1*x3 -1*`x3   = 0 
1*x2 -1*`x2   = 0 
1*x1 -1*`x1   = 0 
1*x4 -1 >= 0
 ]]
Guard [[
1*x4 -1 >= 0
 ]]
Update [[
1*x7 -1*`x7  + 1  = 0 
1*x5 -1*`x5  + 1  = 0 
1*x4 -1*`x4 -1  = 0 
 ]]
Preserved [[
  x1    x2    x3    x6    p    q  ]]
Transition Relation Ends

Dualizing....(in transitionrelation)
After remove_higher_space_dimensions: 
polyd is: E - O = 0, A - K = 0, B - L = 0, C - M = 0, I - S = 0, F - P = 0, H - R = 0, G - Q = 0, -D + E - J + Q + T >= 0, -D + N >= 0
After cs=polyd.minimized_constraints: 
cs is: E - O = 0
cs is: A - K = 0
cs is: B - L = 0
cs is: C - M = 0
cs is: I - S = 0
cs is: F - P = 0
cs is: H - R = 0
cs is: G - Q = 0
cs is: -D + E - J + Q + T >= 0
cs is: -D + N >= 0
Transition Relation
Name: t6
Pre-Location:l0  Post-Location:l0
Transition Relation [[
1*q -1*`q   = 0 
1*p -1*`p   = 0 
1*x7 -1*`x7   = 0 
1*x6 -1*`x6  + 1  = 0 
1*x5 -1*`x5 -1  = 0 
1*x4 -1*`x4   = 0 
1*x3 -1*`x3   = 0 
1*x2 -1*`x2   = 0 
1*x1 -1*`x1   = 0 
1*x5 -1 >= 0
 ]]
Guard [[
1*x5 -1 >= 0
 ]]
Update [[
1*x6 -1*`x6  + 1  = 0 
1*x5 -1*`x5 -1  = 0 
 ]]
Preserved [[
  x1    x2    x3    x4    x7    p    q  ]]
Transition Relation Ends

Dualizing....(in transitionrelation)
After remove_higher_space_dimensions: 
polyd is: F - P = 0, A - K = 0, B - L = 0, C - M = 0, D - N = 0, I - S = 0, G - Q = 0, H - R = 0, -E + F - J + T >= 0, -E + O >= 0
After cs=polyd.minimized_constraints: 
cs is: F - P = 0
cs is: A - K = 0
cs is: B - L = 0
cs is: C - M = 0
cs is: D - N = 0
cs is: I - S = 0
cs is: G - Q = 0
cs is: H - R = 0
cs is: -E + F - J + T >= 0
cs is: -E + O >= 0
----------------------------------------------

3.

In factorizing_strategy_equalities(): 

In split_on_factor_equlities(LinTransform & lt): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_0 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_7 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_5 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_7 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_5 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_0 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_7 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_0 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_7 ) 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_5 ) 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_0 ) 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_7 ) 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_0 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_7 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_5 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_7 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_5 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_0 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_7 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_0 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_7 ) 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_5 ) 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_0 ) 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_7 ) 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_0 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_7 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_5 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_7 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_5 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_0 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_7 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_0 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_7 ) 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_5 ) 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_0 ) 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_7 ) 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In split_on_factor_equlities(LinTransform & lt): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_0 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_7 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_5 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_7 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_5 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_0 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_7 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_0 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_7 ) 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_0 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_7 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_5 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_7 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_5 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_0 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_7 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_0 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_7 ) 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_0 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_7 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_5 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_7 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_5 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_0 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_7 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_0 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_7 ) 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In split_on_factor_equlities(LinTransform & lt): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_0 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_7 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_5 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_7 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_0 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_7 ) 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_0 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_7 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_5 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_7 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_0 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_7 ) 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_0 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_7 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_5 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_7 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_0 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_7 ) 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In split_on_factor_equlities(LinTransform & lt): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_0 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_7 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_5 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_7 ) 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_0 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_7 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_5 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_7 ) 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_0 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_7 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_5 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_7 ) 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In split_on_factor_equlities(LinTransform & lt): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_0 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_7 ) 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_0 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_7 ) 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_8 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_0 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_2 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_6 ) 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_7 ) 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In split_on_factor_equlities(LinTransform & lt): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In factorizing_strategy_equalities(): 

In split_on_factor_equlities(LinTransform & lt): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In split_on_factor_equlities(LinTransform & lt): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_2 ) 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_2 ) 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t1 -1 ) * ( 1*c_l0_2 ) 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In split_on_factor_equlities(LinTransform & lt): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In split_on_factor_equlities(LinTransform & lt): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_1 ) 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_1 ) 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_1 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_1 ) 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In split_on_factor_equlities(LinTransform & lt): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_1 ) 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_1 ) 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_1 ) 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In split_on_factor_equlities(LinTransform & lt): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In split_on_factor_equlities(LinTransform & lt): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_4 ) 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_4 ) 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_4 ) 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In split_on_factor_equlities(LinTransform & lt): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_4 ) 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_4 ) 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_4 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_4 ) 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In split_on_factor_equlities(LinTransform & lt): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_4 ) 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_4 ) 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_4 ) 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In split_on_factor_equlities(LinTransform & lt): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In split_on_factor_equlities(LinTransform & lt): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_3 ) 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_3 ) 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t2 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_3 ) 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In split_on_factor_equlities(LinTransform & lt): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_3 ) 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_3 ) 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t3 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_3 ) 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In split_on_factor_equlities(LinTransform & lt): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_3 ) 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_3 ) 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t4 -1 ) * ( 1*c_l0_3 ) 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_3 ) 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In split_on_factor_equlities(LinTransform & lt): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_3 ) 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_3 ) 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

Expression is: ( 1*M_t6 -1 ) * ( 1*c_l0_3 ) 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In split_on_factor_equlities(LinTransform & lt): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In factorizing_strategy_equalities(): 

In simplify_repeat(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 

In move_constraints()

In move_constraints_equalities(): 

In move_constraints_inequalities(): 
Location::l0 pushing back clump with 7 Polyhedra

In add_clump, the new clump cl is ... 

clump_poly_count is 1
A - B + G = 0, A - F = 0, A - E = 0, B - D = 0, A - B + C = 0, -A + B + I >= 0, A + H >= 0, B + H + I + J >= 0

clump_poly_count is 2
I = 0, H = 0, F = 0, E = 0, D = 0, C = 0, B = 0, J >= 0, G >= 0, A >= 0

clump_poly_count is 3
I = 0, H = 0, G = 0, F = 0, E = 0, D = 0, B = 0, A = 0, J >= 0, C >= 0

clump_poly_count is 4
I = 0, H = 0, G = 0, E = 0, D = 0, C = 0, B = 0, A = 0, J >= 0, F >= 0

clump_poly_count is 5
I = 0, H = 0, G = 0, F = 0, E = 0, D = 0, C = 0, A = 0, J >= 0, B >= 0

clump_poly_count is 6
I = 0, H = 0, G = 0, F = 0, D = 0, C = 0, B = 0, A = 0, J >= 0, E >= 0

clump_poly_count is 7
I = 0, H = 0, G = 0, F = 0, E = 0, C = 0, B = 0, A = 0, J >= 0, D >= 0
... done
----------------------------------------------

4.

- In extract_invariant_and_update(C_Polyhedron & pp, & dualp) : 

- For location l0

- pp is A - B + G = 0, A - F = 0, A - E = 0, B - D = 0, A - B + C = 0, -A + B + I >= 0, A + H >= 0, B + H + I + J >= 0

- pp.minimized_generators() is l(A - C + E + F - G - H + I), l(B + C + D + G - I), p(0), r(I - J), r(J), r(A - C + E + F - G + I - J)

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is l(A - C + E + F - G - H + I)

- g.space_dimension() is 10

- Variable(9) is J
- g.coefficient(J) is 0
- lin is 0

- Variable(8) is I
- g.coefficient(I) is 1
- lin is I

- Variable(7) is H
- g.coefficient(H) is -1
- lin is -H + I

- Variable(6) is G
- g.coefficient(G) is -1
- lin is -G - H + I

- Variable(5) is F
- g.coefficient(F) is 1
- lin is F - G - H + I

- Variable(4) is E
- g.coefficient(E) is 1
- lin is E + F - G - H + I

- Variable(3) is D
- g.coefficient(D) is 0
- lin is E + F - G - H + I

- Variable(2) is C
- g.coefficient(C) is -1
- lin is -C + E + F - G - H + I

- Variable(1) is B
- g.coefficient(B) is 0
- lin is -C + E + F - G - H + I

- Variable(0) is A
- g.coefficient(A) is 1
- lin is A - C + E + F - G - H + I

- handle_integers(1) is 1
- lin.coefficient(Variable(l+i)) is 1
- Variable(0) is A
- l is 0
- i is 0
- c is 1
- lin1 is A

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(1) is B
- l is 0
- i is 1
- c is 0
- lin1 is A

- handle_integers(-1) is 1
- lin.coefficient(Variable(l+i)) is -1
- Variable(2) is C
- l is 0
- i is 2
- c is -1
- lin1 is A - C

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(3) is D
- l is 0
- i is 3
- c is 0
- lin1 is A - C

- handle_integers(1) is 1
- lin.coefficient(Variable(l+i)) is 1
- Variable(4) is E
- l is 0
- i is 4
- c is 1
- lin1 is A - C + E

- handle_integers(1) is 1
- lin.coefficient(Variable(l+i)) is 1
- Variable(5) is F
- l is 0
- i is 5
- c is 1
- lin1 is A - C + E + F

- handle_integers(-1) is 1
- lin.coefficient(Variable(l+i)) is -1
- Variable(6) is G
- l is 0
- i is 6
- c is -1
- lin1 is A - C + E + F - G

- handle_integers(-1) is 1
- lin.coefficient(Variable(l+i)) is -1
- Variable(7) is H
- l is 0
- i is 7
- c is -1
- lin1 is A - C + E + F - G - H

- handle_integers(1) is 1
- lin.coefficient(Variable(l+i)) is 1
- Variable(8) is I
- l is 0
- i is 8
- c is 1
- lin1 is A - C + E + F - G - H + I

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(9) is J
- l is 0
- n is 9
- c is 0
- lin1 is A - C + E + F - G - H + I
l0=>1*x1 -1*x3 +1*x5 +1*x6 -1*x7 -1*p +1*q (add_to_invariant!)==0
invariant is A - C + E + F - G - H + I = 0

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is l(B + C + D + G - I)

- g.space_dimension() is 10

- Variable(9) is J
- g.coefficient(J) is 0
- lin is 0

- Variable(8) is I
- g.coefficient(I) is -1
- lin is -I

- Variable(7) is H
- g.coefficient(H) is 0
- lin is -I

- Variable(6) is G
- g.coefficient(G) is 1
- lin is G - I

- Variable(5) is F
- g.coefficient(F) is 0
- lin is G - I

- Variable(4) is E
- g.coefficient(E) is 0
- lin is G - I

- Variable(3) is D
- g.coefficient(D) is 1
- lin is D + G - I

- Variable(2) is C
- g.coefficient(C) is 1
- lin is C + D + G - I

- Variable(1) is B
- g.coefficient(B) is 1
- lin is B + C + D + G - I

- Variable(0) is A
- g.coefficient(A) is 0
- lin is B + C + D + G - I

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(0) is A
- l is 0
- i is 0
- c is 0
- lin1 is 0

- handle_integers(1) is 1
- lin.coefficient(Variable(l+i)) is 1
- Variable(1) is B
- l is 0
- i is 1
- c is 1
- lin1 is B

- handle_integers(1) is 1
- lin.coefficient(Variable(l+i)) is 1
- Variable(2) is C
- l is 0
- i is 2
- c is 1
- lin1 is B + C

- handle_integers(1) is 1
- lin.coefficient(Variable(l+i)) is 1
- Variable(3) is D
- l is 0
- i is 3
- c is 1
- lin1 is B + C + D

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(4) is E
- l is 0
- i is 4
- c is 0
- lin1 is B + C + D

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(5) is F
- l is 0
- i is 5
- c is 0
- lin1 is B + C + D

- handle_integers(1) is 1
- lin.coefficient(Variable(l+i)) is 1
- Variable(6) is G
- l is 0
- i is 6
- c is 1
- lin1 is B + C + D + G

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(7) is H
- l is 0
- i is 7
- c is 0
- lin1 is B + C + D + G

- handle_integers(-1) is 1
- lin.coefficient(Variable(l+i)) is -1
- Variable(8) is I
- l is 0
- i is 8
- c is -1
- lin1 is B + C + D + G - I

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(9) is J
- l is 0
- n is 9
- c is 0
- lin1 is B + C + D + G - I
l0=>1*x2 +1*x3 +1*x4 +1*x7 -1*q (add_to_invariant!)==0
invariant is B + C + D + G - I = 0, A + B + D + E + F - H = 0

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is p(0)

- g.space_dimension() is 10

- Variable(9) is J
- g.coefficient(J) is 0
- lin is 0

- Variable(8) is I
- g.coefficient(I) is 0
- lin is 0

- Variable(7) is H
- g.coefficient(H) is 0
- lin is 0

- Variable(6) is G
- g.coefficient(G) is 0
- lin is 0

- Variable(5) is F
- g.coefficient(F) is 0
- lin is 0

- Variable(4) is E
- g.coefficient(E) is 0
- lin is 0

- Variable(3) is D
- g.coefficient(D) is 0
- lin is 0

- Variable(2) is C
- g.coefficient(C) is 0
- lin is 0

- Variable(1) is B
- g.coefficient(B) is 0
- lin is 0

- Variable(0) is A
- g.coefficient(A) is 0
- lin is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(0) is A
- l is 0
- i is 0
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(1) is B
- l is 0
- i is 1
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(2) is C
- l is 0
- i is 2
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(3) is D
- l is 0
- i is 3
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(4) is E
- l is 0
- i is 4
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(5) is F
- l is 0
- i is 5
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(6) is G
- l is 0
- i is 6
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(7) is H
- l is 0
- i is 7
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(8) is I
- l is 0
- i is 8
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(9) is J
- l is 0
- n is 9
- c is 0
- lin1 is 0
l0=>0(add_to_invariant!)>=0
invariant is B + C + D + G - I = 0, A + B + D + E + F - H = 0

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is r(I - J)

- g.space_dimension() is 10

- Variable(9) is J
- g.coefficient(J) is -1
- lin is -J

- Variable(8) is I
- g.coefficient(I) is 1
- lin is I - J

- Variable(7) is H
- g.coefficient(H) is 0
- lin is I - J

- Variable(6) is G
- g.coefficient(G) is 0
- lin is I - J

- Variable(5) is F
- g.coefficient(F) is 0
- lin is I - J

- Variable(4) is E
- g.coefficient(E) is 0
- lin is I - J

- Variable(3) is D
- g.coefficient(D) is 0
- lin is I - J

- Variable(2) is C
- g.coefficient(C) is 0
- lin is I - J

- Variable(1) is B
- g.coefficient(B) is 0
- lin is I - J

- Variable(0) is A
- g.coefficient(A) is 0
- lin is I - J

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(0) is A
- l is 0
- i is 0
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(1) is B
- l is 0
- i is 1
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(2) is C
- l is 0
- i is 2
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(3) is D
- l is 0
- i is 3
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(4) is E
- l is 0
- i is 4
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(5) is F
- l is 0
- i is 5
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(6) is G
- l is 0
- i is 6
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(7) is H
- l is 0
- i is 7
- c is 0
- lin1 is 0

- handle_integers(1) is 1
- lin.coefficient(Variable(l+i)) is 1
- Variable(8) is I
- l is 0
- i is 8
- c is 1
- lin1 is I

- handle_integers(-1) is 1
- lin.coefficient(Variable(l+i)) is -1
- Variable(9) is J
- l is 0
- n is 9
- c is -1
- lin1 is I - 1
l0=>1*q -1(add_to_invariant!)>=0
invariant is B + C + D + G - I = 0, A + B + D + E + F - H = 0, B + C + D + G >= 1

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is r(J)

- g.space_dimension() is 10

- Variable(9) is J
- g.coefficient(J) is 1
- lin is J

- Variable(8) is I
- g.coefficient(I) is 0
- lin is J

- Variable(7) is H
- g.coefficient(H) is 0
- lin is J

- Variable(6) is G
- g.coefficient(G) is 0
- lin is J

- Variable(5) is F
- g.coefficient(F) is 0
- lin is J

- Variable(4) is E
- g.coefficient(E) is 0
- lin is J

- Variable(3) is D
- g.coefficient(D) is 0
- lin is J

- Variable(2) is C
- g.coefficient(C) is 0
- lin is J

- Variable(1) is B
- g.coefficient(B) is 0
- lin is J

- Variable(0) is A
- g.coefficient(A) is 0
- lin is J

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(0) is A
- l is 0
- i is 0
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(1) is B
- l is 0
- i is 1
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(2) is C
- l is 0
- i is 2
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(3) is D
- l is 0
- i is 3
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(4) is E
- l is 0
- i is 4
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(5) is F
- l is 0
- i is 5
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(6) is G
- l is 0
- i is 6
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(7) is H
- l is 0
- i is 7
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(8) is I
- l is 0
- i is 8
- c is 0
- lin1 is 0

- handle_integers(1) is 1
- lin.coefficient(Variable(l+i)) is 1
- Variable(9) is J
- l is 0
- n is 9
- c is 1
- lin1 is 1
l0=> + 1(add_to_invariant!)>=0
invariant is B + C + D + G - I = 0, A + B + D + E + F - H = 0, B + C + D + G >= 1

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is r(A - C + E + F - G + I - J)

- g.space_dimension() is 10

- Variable(9) is J
- g.coefficient(J) is -1
- lin is -J

- Variable(8) is I
- g.coefficient(I) is 1
- lin is I - J

- Variable(7) is H
- g.coefficient(H) is 0
- lin is I - J

- Variable(6) is G
- g.coefficient(G) is -1
- lin is -G + I - J

- Variable(5) is F
- g.coefficient(F) is 1
- lin is F - G + I - J

- Variable(4) is E
- g.coefficient(E) is 1
- lin is E + F - G + I - J

- Variable(3) is D
- g.coefficient(D) is 0
- lin is E + F - G + I - J

- Variable(2) is C
- g.coefficient(C) is -1
- lin is -C + E + F - G + I - J

- Variable(1) is B
- g.coefficient(B) is 0
- lin is -C + E + F - G + I - J

- Variable(0) is A
- g.coefficient(A) is 1
- lin is A - C + E + F - G + I - J

- handle_integers(1) is 1
- lin.coefficient(Variable(l+i)) is 1
- Variable(0) is A
- l is 0
- i is 0
- c is 1
- lin1 is A

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(1) is B
- l is 0
- i is 1
- c is 0
- lin1 is A

- handle_integers(-1) is 1
- lin.coefficient(Variable(l+i)) is -1
- Variable(2) is C
- l is 0
- i is 2
- c is -1
- lin1 is A - C

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(3) is D
- l is 0
- i is 3
- c is 0
- lin1 is A - C

- handle_integers(1) is 1
- lin.coefficient(Variable(l+i)) is 1
- Variable(4) is E
- l is 0
- i is 4
- c is 1
- lin1 is A - C + E

- handle_integers(1) is 1
- lin.coefficient(Variable(l+i)) is 1
- Variable(5) is F
- l is 0
- i is 5
- c is 1
- lin1 is A - C + E + F

- handle_integers(-1) is 1
- lin.coefficient(Variable(l+i)) is -1
- Variable(6) is G
- l is 0
- i is 6
- c is -1
- lin1 is A - C + E + F - G

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(7) is H
- l is 0
- i is 7
- c is 0
- lin1 is A - C + E + F - G

- handle_integers(1) is 1
- lin.coefficient(Variable(l+i)) is 1
- Variable(8) is I
- l is 0
- i is 8
- c is 1
- lin1 is A - C + E + F - G + I

- handle_integers(-1) is 1
- lin.coefficient(Variable(l+i)) is -1
- Variable(9) is J
- l is 0
- n is 9
- c is -1
- lin1 is A - C + E + F - G + I - 1
l0=>1*x1 -1*x3 +1*x5 +1*x6 -1*x7 +1*q -1(add_to_invariant!)>=0
invariant is B + C + D + G - I = 0, A + B + D + E + F - H = 0, B + C + D + G >= 1, A + B + D + E + F >= 1

- In extract_invariant_and_update(C_Polyhedron & pp, & dualp) : 

- For location l0

- pp is I = 0, H = 0, F = 0, E = 0, D = 0, C = 0, B = 0, A >= 0, J >= 0, G >= 0

- pp.minimized_generators() is r(A), p(0), r(J), r(G)

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is r(A)

- g.space_dimension() is 10

- Variable(9) is J
- g.coefficient(J) is 0
- lin is 0

- Variable(8) is I
- g.coefficient(I) is 0
- lin is 0

- Variable(7) is H
- g.coefficient(H) is 0
- lin is 0

- Variable(6) is G
- g.coefficient(G) is 0
- lin is 0

- Variable(5) is F
- g.coefficient(F) is 0
- lin is 0

- Variable(4) is E
- g.coefficient(E) is 0
- lin is 0

- Variable(3) is D
- g.coefficient(D) is 0
- lin is 0

- Variable(2) is C
- g.coefficient(C) is 0
- lin is 0

- Variable(1) is B
- g.coefficient(B) is 0
- lin is 0

- Variable(0) is A
- g.coefficient(A) is 1
- lin is A

- handle_integers(1) is 1
- lin.coefficient(Variable(l+i)) is 1
- Variable(0) is A
- l is 0
- i is 0
- c is 1
- lin1 is A

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(1) is B
- l is 0
- i is 1
- c is 0
- lin1 is A

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(2) is C
- l is 0
- i is 2
- c is 0
- lin1 is A

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(3) is D
- l is 0
- i is 3
- c is 0
- lin1 is A

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(4) is E
- l is 0
- i is 4
- c is 0
- lin1 is A

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(5) is F
- l is 0
- i is 5
- c is 0
- lin1 is A

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(6) is G
- l is 0
- i is 6
- c is 0
- lin1 is A

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(7) is H
- l is 0
- i is 7
- c is 0
- lin1 is A

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(8) is I
- l is 0
- i is 8
- c is 0
- lin1 is A

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(9) is J
- l is 0
- n is 9
- c is 0
- lin1 is A
l0=>1*x1 (add_to_invariant!)>=0
invariant is B + C + D + G - I = 0, A + B + D + E + F - H = 0, B + C + D + G >= 1, A + B + D + E + F >= 1, A >= 0

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is p(0)

- g.space_dimension() is 10

- Variable(9) is J
- g.coefficient(J) is 0
- lin is 0

- Variable(8) is I
- g.coefficient(I) is 0
- lin is 0

- Variable(7) is H
- g.coefficient(H) is 0
- lin is 0

- Variable(6) is G
- g.coefficient(G) is 0
- lin is 0

- Variable(5) is F
- g.coefficient(F) is 0
- lin is 0

- Variable(4) is E
- g.coefficient(E) is 0
- lin is 0

- Variable(3) is D
- g.coefficient(D) is 0
- lin is 0

- Variable(2) is C
- g.coefficient(C) is 0
- lin is 0

- Variable(1) is B
- g.coefficient(B) is 0
- lin is 0

- Variable(0) is A
- g.coefficient(A) is 0
- lin is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(0) is A
- l is 0
- i is 0
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(1) is B
- l is 0
- i is 1
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(2) is C
- l is 0
- i is 2
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(3) is D
- l is 0
- i is 3
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(4) is E
- l is 0
- i is 4
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(5) is F
- l is 0
- i is 5
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(6) is G
- l is 0
- i is 6
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(7) is H
- l is 0
- i is 7
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(8) is I
- l is 0
- i is 8
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(9) is J
- l is 0
- n is 9
- c is 0
- lin1 is 0
l0=>0(add_to_invariant!)>=0
invariant is B + C + D + G - I = 0, A + B + D + E + F - H = 0, B + C + D + G >= 1, A >= 0, A + B + D + E + F >= 1

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is r(J)

- g.space_dimension() is 10

- Variable(9) is J
- g.coefficient(J) is 1
- lin is J

- Variable(8) is I
- g.coefficient(I) is 0
- lin is J

- Variable(7) is H
- g.coefficient(H) is 0
- lin is J

- Variable(6) is G
- g.coefficient(G) is 0
- lin is J

- Variable(5) is F
- g.coefficient(F) is 0
- lin is J

- Variable(4) is E
- g.coefficient(E) is 0
- lin is J

- Variable(3) is D
- g.coefficient(D) is 0
- lin is J

- Variable(2) is C
- g.coefficient(C) is 0
- lin is J

- Variable(1) is B
- g.coefficient(B) is 0
- lin is J

- Variable(0) is A
- g.coefficient(A) is 0
- lin is J

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(0) is A
- l is 0
- i is 0
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(1) is B
- l is 0
- i is 1
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(2) is C
- l is 0
- i is 2
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(3) is D
- l is 0
- i is 3
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(4) is E
- l is 0
- i is 4
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(5) is F
- l is 0
- i is 5
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(6) is G
- l is 0
- i is 6
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(7) is H
- l is 0
- i is 7
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(8) is I
- l is 0
- i is 8
- c is 0
- lin1 is 0

- handle_integers(1) is 1
- lin.coefficient(Variable(l+i)) is 1
- Variable(9) is J
- l is 0
- n is 9
- c is 1
- lin1 is 1
l0=> + 1(add_to_invariant!)>=0
invariant is B + C + D + G - I = 0, A + B + D + E + F - H = 0, B + C + D + G >= 1, A >= 0, A + B + D + E + F >= 1

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is r(G)

- g.space_dimension() is 10

- Variable(9) is J
- g.coefficient(J) is 0
- lin is 0

- Variable(8) is I
- g.coefficient(I) is 0
- lin is 0

- Variable(7) is H
- g.coefficient(H) is 0
- lin is 0

- Variable(6) is G
- g.coefficient(G) is 1
- lin is G

- Variable(5) is F
- g.coefficient(F) is 0
- lin is G

- Variable(4) is E
- g.coefficient(E) is 0
- lin is G

- Variable(3) is D
- g.coefficient(D) is 0
- lin is G

- Variable(2) is C
- g.coefficient(C) is 0
- lin is G

- Variable(1) is B
- g.coefficient(B) is 0
- lin is G

- Variable(0) is A
- g.coefficient(A) is 0
- lin is G

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(0) is A
- l is 0
- i is 0
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(1) is B
- l is 0
- i is 1
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(2) is C
- l is 0
- i is 2
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(3) is D
- l is 0
- i is 3
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(4) is E
- l is 0
- i is 4
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(5) is F
- l is 0
- i is 5
- c is 0
- lin1 is 0

- handle_integers(1) is 1
- lin.coefficient(Variable(l+i)) is 1
- Variable(6) is G
- l is 0
- i is 6
- c is 1
- lin1 is G

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(7) is H
- l is 0
- i is 7
- c is 0
- lin1 is G

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(8) is I
- l is 0
- i is 8
- c is 0
- lin1 is G

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(9) is J
- l is 0
- n is 9
- c is 0
- lin1 is G
l0=>1*x7 (add_to_invariant!)>=0
invariant is B + C + D + G - I = 0, A + B + D + E + F - H = 0, B + C + D + G >= 1, A >= 0, A + B + D + E + F >= 1, G >= 0

- In extract_invariant_and_update(C_Polyhedron & pp, & dualp) : 

- For location l0

- pp is I = 0, H = 0, G = 0, F = 0, E = 0, D = 0, B = 0, A = 0, C >= 0, J >= 0

- pp.minimized_generators() is r(C), p(0), r(J)

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is r(C)

- g.space_dimension() is 10

- Variable(9) is J
- g.coefficient(J) is 0
- lin is 0

- Variable(8) is I
- g.coefficient(I) is 0
- lin is 0

- Variable(7) is H
- g.coefficient(H) is 0
- lin is 0

- Variable(6) is G
- g.coefficient(G) is 0
- lin is 0

- Variable(5) is F
- g.coefficient(F) is 0
- lin is 0

- Variable(4) is E
- g.coefficient(E) is 0
- lin is 0

- Variable(3) is D
- g.coefficient(D) is 0
- lin is 0

- Variable(2) is C
- g.coefficient(C) is 1
- lin is C

- Variable(1) is B
- g.coefficient(B) is 0
- lin is C

- Variable(0) is A
- g.coefficient(A) is 0
- lin is C

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(0) is A
- l is 0
- i is 0
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(1) is B
- l is 0
- i is 1
- c is 0
- lin1 is 0

- handle_integers(1) is 1
- lin.coefficient(Variable(l+i)) is 1
- Variable(2) is C
- l is 0
- i is 2
- c is 1
- lin1 is C

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(3) is D
- l is 0
- i is 3
- c is 0
- lin1 is C

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(4) is E
- l is 0
- i is 4
- c is 0
- lin1 is C

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(5) is F
- l is 0
- i is 5
- c is 0
- lin1 is C

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(6) is G
- l is 0
- i is 6
- c is 0
- lin1 is C

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(7) is H
- l is 0
- i is 7
- c is 0
- lin1 is C

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(8) is I
- l is 0
- i is 8
- c is 0
- lin1 is C

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(9) is J
- l is 0
- n is 9
- c is 0
- lin1 is C
l0=>1*x3 (add_to_invariant!)>=0
invariant is B + C + D + G - I = 0, A + B + D + E + F - H = 0, G >= 0, B + C + D + G >= 1, A >= 0, A + B + D + E + F >= 1, C >= 0

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is p(0)

- g.space_dimension() is 10

- Variable(9) is J
- g.coefficient(J) is 0
- lin is 0

- Variable(8) is I
- g.coefficient(I) is 0
- lin is 0

- Variable(7) is H
- g.coefficient(H) is 0
- lin is 0

- Variable(6) is G
- g.coefficient(G) is 0
- lin is 0

- Variable(5) is F
- g.coefficient(F) is 0
- lin is 0

- Variable(4) is E
- g.coefficient(E) is 0
- lin is 0

- Variable(3) is D
- g.coefficient(D) is 0
- lin is 0

- Variable(2) is C
- g.coefficient(C) is 0
- lin is 0

- Variable(1) is B
- g.coefficient(B) is 0
- lin is 0

- Variable(0) is A
- g.coefficient(A) is 0
- lin is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(0) is A
- l is 0
- i is 0
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(1) is B
- l is 0
- i is 1
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(2) is C
- l is 0
- i is 2
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(3) is D
- l is 0
- i is 3
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(4) is E
- l is 0
- i is 4
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(5) is F
- l is 0
- i is 5
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(6) is G
- l is 0
- i is 6
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(7) is H
- l is 0
- i is 7
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(8) is I
- l is 0
- i is 8
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(9) is J
- l is 0
- n is 9
- c is 0
- lin1 is 0
l0=>0(add_to_invariant!)>=0
invariant is B + C + D + G - I = 0, A + B + D + E + F - H = 0, G >= 0, C >= 0, B + C + D + G >= 1, A >= 0, A + B + D + E + F >= 1

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is r(J)

- g.space_dimension() is 10

- Variable(9) is J
- g.coefficient(J) is 1
- lin is J

- Variable(8) is I
- g.coefficient(I) is 0
- lin is J

- Variable(7) is H
- g.coefficient(H) is 0
- lin is J

- Variable(6) is G
- g.coefficient(G) is 0
- lin is J

- Variable(5) is F
- g.coefficient(F) is 0
- lin is J

- Variable(4) is E
- g.coefficient(E) is 0
- lin is J

- Variable(3) is D
- g.coefficient(D) is 0
- lin is J

- Variable(2) is C
- g.coefficient(C) is 0
- lin is J

- Variable(1) is B
- g.coefficient(B) is 0
- lin is J

- Variable(0) is A
- g.coefficient(A) is 0
- lin is J

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(0) is A
- l is 0
- i is 0
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(1) is B
- l is 0
- i is 1
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(2) is C
- l is 0
- i is 2
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(3) is D
- l is 0
- i is 3
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(4) is E
- l is 0
- i is 4
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(5) is F
- l is 0
- i is 5
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(6) is G
- l is 0
- i is 6
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(7) is H
- l is 0
- i is 7
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(8) is I
- l is 0
- i is 8
- c is 0
- lin1 is 0

- handle_integers(1) is 1
- lin.coefficient(Variable(l+i)) is 1
- Variable(9) is J
- l is 0
- n is 9
- c is 1
- lin1 is 1
l0=> + 1(add_to_invariant!)>=0
invariant is B + C + D + G - I = 0, A + B + D + E + F - H = 0, G >= 0, C >= 0, B + C + D + G >= 1, A >= 0, A + B + D + E + F >= 1

- In extract_invariant_and_update(C_Polyhedron & pp, & dualp) : 

- For location l0

- pp is I = 0, H = 0, G = 0, E = 0, D = 0, C = 0, B = 0, A = 0, J >= 0, F >= 0

- pp.minimized_generators() is p(0), r(J), r(F)

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is p(0)

- g.space_dimension() is 10

- Variable(9) is J
- g.coefficient(J) is 0
- lin is 0

- Variable(8) is I
- g.coefficient(I) is 0
- lin is 0

- Variable(7) is H
- g.coefficient(H) is 0
- lin is 0

- Variable(6) is G
- g.coefficient(G) is 0
- lin is 0

- Variable(5) is F
- g.coefficient(F) is 0
- lin is 0

- Variable(4) is E
- g.coefficient(E) is 0
- lin is 0

- Variable(3) is D
- g.coefficient(D) is 0
- lin is 0

- Variable(2) is C
- g.coefficient(C) is 0
- lin is 0

- Variable(1) is B
- g.coefficient(B) is 0
- lin is 0

- Variable(0) is A
- g.coefficient(A) is 0
- lin is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(0) is A
- l is 0
- i is 0
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(1) is B
- l is 0
- i is 1
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(2) is C
- l is 0
- i is 2
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(3) is D
- l is 0
- i is 3
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(4) is E
- l is 0
- i is 4
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(5) is F
- l is 0
- i is 5
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(6) is G
- l is 0
- i is 6
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(7) is H
- l is 0
- i is 7
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(8) is I
- l is 0
- i is 8
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(9) is J
- l is 0
- n is 9
- c is 0
- lin1 is 0
l0=>0(add_to_invariant!)>=0
invariant is B + C + D + G - I = 0, A + B + D + E + F - H = 0, G >= 0, C >= 0, B + C + D + G >= 1, A >= 0, A + B + D + E + F >= 1

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is r(J)

- g.space_dimension() is 10

- Variable(9) is J
- g.coefficient(J) is 1
- lin is J

- Variable(8) is I
- g.coefficient(I) is 0
- lin is J

- Variable(7) is H
- g.coefficient(H) is 0
- lin is J

- Variable(6) is G
- g.coefficient(G) is 0
- lin is J

- Variable(5) is F
- g.coefficient(F) is 0
- lin is J

- Variable(4) is E
- g.coefficient(E) is 0
- lin is J

- Variable(3) is D
- g.coefficient(D) is 0
- lin is J

- Variable(2) is C
- g.coefficient(C) is 0
- lin is J

- Variable(1) is B
- g.coefficient(B) is 0
- lin is J

- Variable(0) is A
- g.coefficient(A) is 0
- lin is J

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(0) is A
- l is 0
- i is 0
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(1) is B
- l is 0
- i is 1
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(2) is C
- l is 0
- i is 2
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(3) is D
- l is 0
- i is 3
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(4) is E
- l is 0
- i is 4
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(5) is F
- l is 0
- i is 5
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(6) is G
- l is 0
- i is 6
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(7) is H
- l is 0
- i is 7
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(8) is I
- l is 0
- i is 8
- c is 0
- lin1 is 0

- handle_integers(1) is 1
- lin.coefficient(Variable(l+i)) is 1
- Variable(9) is J
- l is 0
- n is 9
- c is 1
- lin1 is 1
l0=> + 1(add_to_invariant!)>=0
invariant is B + C + D + G - I = 0, A + B + D + E + F - H = 0, G >= 0, C >= 0, B + C + D + G >= 1, A >= 0, A + B + D + E + F >= 1

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is r(F)

- g.space_dimension() is 10

- Variable(9) is J
- g.coefficient(J) is 0
- lin is 0

- Variable(8) is I
- g.coefficient(I) is 0
- lin is 0

- Variable(7) is H
- g.coefficient(H) is 0
- lin is 0

- Variable(6) is G
- g.coefficient(G) is 0
- lin is 0

- Variable(5) is F
- g.coefficient(F) is 1
- lin is F

- Variable(4) is E
- g.coefficient(E) is 0
- lin is F

- Variable(3) is D
- g.coefficient(D) is 0
- lin is F

- Variable(2) is C
- g.coefficient(C) is 0
- lin is F

- Variable(1) is B
- g.coefficient(B) is 0
- lin is F

- Variable(0) is A
- g.coefficient(A) is 0
- lin is F

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(0) is A
- l is 0
- i is 0
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(1) is B
- l is 0
- i is 1
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(2) is C
- l is 0
- i is 2
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(3) is D
- l is 0
- i is 3
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(4) is E
- l is 0
- i is 4
- c is 0
- lin1 is 0

- handle_integers(1) is 1
- lin.coefficient(Variable(l+i)) is 1
- Variable(5) is F
- l is 0
- i is 5
- c is 1
- lin1 is F

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(6) is G
- l is 0
- i is 6
- c is 0
- lin1 is F

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(7) is H
- l is 0
- i is 7
- c is 0
- lin1 is F

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(8) is I
- l is 0
- i is 8
- c is 0
- lin1 is F

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(9) is J
- l is 0
- n is 9
- c is 0
- lin1 is F
l0=>1*x6 (add_to_invariant!)>=0
invariant is B + C + D + G - I = 0, A + B + D + E + F - H = 0, G >= 0, C >= 0, B + C + D + G >= 1, A >= 0, A + B + D + E + F >= 1, F >= 0

- In extract_invariant_and_update(C_Polyhedron & pp, & dualp) : 

- For location l0

- pp is I = 0, H = 0, G = 0, F = 0, E = 0, D = 0, C = 0, A = 0, B >= 0, J >= 0

- pp.minimized_generators() is r(B), p(0), r(J)

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is r(B)

- g.space_dimension() is 10

- Variable(9) is J
- g.coefficient(J) is 0
- lin is 0

- Variable(8) is I
- g.coefficient(I) is 0
- lin is 0

- Variable(7) is H
- g.coefficient(H) is 0
- lin is 0

- Variable(6) is G
- g.coefficient(G) is 0
- lin is 0

- Variable(5) is F
- g.coefficient(F) is 0
- lin is 0

- Variable(4) is E
- g.coefficient(E) is 0
- lin is 0

- Variable(3) is D
- g.coefficient(D) is 0
- lin is 0

- Variable(2) is C
- g.coefficient(C) is 0
- lin is 0

- Variable(1) is B
- g.coefficient(B) is 1
- lin is B

- Variable(0) is A
- g.coefficient(A) is 0
- lin is B

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(0) is A
- l is 0
- i is 0
- c is 0
- lin1 is 0

- handle_integers(1) is 1
- lin.coefficient(Variable(l+i)) is 1
- Variable(1) is B
- l is 0
- i is 1
- c is 1
- lin1 is B

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(2) is C
- l is 0
- i is 2
- c is 0
- lin1 is B

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(3) is D
- l is 0
- i is 3
- c is 0
- lin1 is B

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(4) is E
- l is 0
- i is 4
- c is 0
- lin1 is B

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(5) is F
- l is 0
- i is 5
- c is 0
- lin1 is B

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(6) is G
- l is 0
- i is 6
- c is 0
- lin1 is B

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(7) is H
- l is 0
- i is 7
- c is 0
- lin1 is B

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(8) is I
- l is 0
- i is 8
- c is 0
- lin1 is B

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(9) is J
- l is 0
- n is 9
- c is 0
- lin1 is B
l0=>1*x2 (add_to_invariant!)>=0
invariant is B + C + D + G - I = 0, A + B + D + E + F - H = 0, G >= 0, F >= 0, C >= 0, B + C + D + G >= 1, A >= 0, A + B + D + E + F >= 1, B >= 0

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is p(0)

- g.space_dimension() is 10

- Variable(9) is J
- g.coefficient(J) is 0
- lin is 0

- Variable(8) is I
- g.coefficient(I) is 0
- lin is 0

- Variable(7) is H
- g.coefficient(H) is 0
- lin is 0

- Variable(6) is G
- g.coefficient(G) is 0
- lin is 0

- Variable(5) is F
- g.coefficient(F) is 0
- lin is 0

- Variable(4) is E
- g.coefficient(E) is 0
- lin is 0

- Variable(3) is D
- g.coefficient(D) is 0
- lin is 0

- Variable(2) is C
- g.coefficient(C) is 0
- lin is 0

- Variable(1) is B
- g.coefficient(B) is 0
- lin is 0

- Variable(0) is A
- g.coefficient(A) is 0
- lin is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(0) is A
- l is 0
- i is 0
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(1) is B
- l is 0
- i is 1
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(2) is C
- l is 0
- i is 2
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(3) is D
- l is 0
- i is 3
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(4) is E
- l is 0
- i is 4
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(5) is F
- l is 0
- i is 5
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(6) is G
- l is 0
- i is 6
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(7) is H
- l is 0
- i is 7
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(8) is I
- l is 0
- i is 8
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(9) is J
- l is 0
- n is 9
- c is 0
- lin1 is 0
l0=>0(add_to_invariant!)>=0
invariant is B + C + D + G - I = 0, A + B + D + E + F - H = 0, G >= 0, F >= 0, C >= 0, B >= 0, B + C + D + G >= 1, A >= 0, A + B + D + E + F >= 1

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is r(J)

- g.space_dimension() is 10

- Variable(9) is J
- g.coefficient(J) is 1
- lin is J

- Variable(8) is I
- g.coefficient(I) is 0
- lin is J

- Variable(7) is H
- g.coefficient(H) is 0
- lin is J

- Variable(6) is G
- g.coefficient(G) is 0
- lin is J

- Variable(5) is F
- g.coefficient(F) is 0
- lin is J

- Variable(4) is E
- g.coefficient(E) is 0
- lin is J

- Variable(3) is D
- g.coefficient(D) is 0
- lin is J

- Variable(2) is C
- g.coefficient(C) is 0
- lin is J

- Variable(1) is B
- g.coefficient(B) is 0
- lin is J

- Variable(0) is A
- g.coefficient(A) is 0
- lin is J

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(0) is A
- l is 0
- i is 0
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(1) is B
- l is 0
- i is 1
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(2) is C
- l is 0
- i is 2
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(3) is D
- l is 0
- i is 3
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(4) is E
- l is 0
- i is 4
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(5) is F
- l is 0
- i is 5
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(6) is G
- l is 0
- i is 6
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(7) is H
- l is 0
- i is 7
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(8) is I
- l is 0
- i is 8
- c is 0
- lin1 is 0

- handle_integers(1) is 1
- lin.coefficient(Variable(l+i)) is 1
- Variable(9) is J
- l is 0
- n is 9
- c is 1
- lin1 is 1
l0=> + 1(add_to_invariant!)>=0
invariant is B + C + D + G - I = 0, A + B + D + E + F - H = 0, G >= 0, F >= 0, C >= 0, B >= 0, B + C + D + G >= 1, A >= 0, A + B + D + E + F >= 1

- In extract_invariant_and_update(C_Polyhedron & pp, & dualp) : 

- For location l0

- pp is I = 0, H = 0, G = 0, F = 0, D = 0, C = 0, B = 0, A = 0, E >= 0, J >= 0

- pp.minimized_generators() is r(E), p(0), r(J)

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is r(E)

- g.space_dimension() is 10

- Variable(9) is J
- g.coefficient(J) is 0
- lin is 0

- Variable(8) is I
- g.coefficient(I) is 0
- lin is 0

- Variable(7) is H
- g.coefficient(H) is 0
- lin is 0

- Variable(6) is G
- g.coefficient(G) is 0
- lin is 0

- Variable(5) is F
- g.coefficient(F) is 0
- lin is 0

- Variable(4) is E
- g.coefficient(E) is 1
- lin is E

- Variable(3) is D
- g.coefficient(D) is 0
- lin is E

- Variable(2) is C
- g.coefficient(C) is 0
- lin is E

- Variable(1) is B
- g.coefficient(B) is 0
- lin is E

- Variable(0) is A
- g.coefficient(A) is 0
- lin is E

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(0) is A
- l is 0
- i is 0
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(1) is B
- l is 0
- i is 1
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(2) is C
- l is 0
- i is 2
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(3) is D
- l is 0
- i is 3
- c is 0
- lin1 is 0

- handle_integers(1) is 1
- lin.coefficient(Variable(l+i)) is 1
- Variable(4) is E
- l is 0
- i is 4
- c is 1
- lin1 is E

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(5) is F
- l is 0
- i is 5
- c is 0
- lin1 is E

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(6) is G
- l is 0
- i is 6
- c is 0
- lin1 is E

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(7) is H
- l is 0
- i is 7
- c is 0
- lin1 is E

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(8) is I
- l is 0
- i is 8
- c is 0
- lin1 is E

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(9) is J
- l is 0
- n is 9
- c is 0
- lin1 is E
l0=>1*x5 (add_to_invariant!)>=0
invariant is B + C + D + G - I = 0, A + B + D + E + F - H = 0, G >= 0, F >= 0, C >= 0, B >= 0, B + C + D + G >= 1, A >= 0, A + B + D + E + F >= 1, E >= 0

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is p(0)

- g.space_dimension() is 10

- Variable(9) is J
- g.coefficient(J) is 0
- lin is 0

- Variable(8) is I
- g.coefficient(I) is 0
- lin is 0

- Variable(7) is H
- g.coefficient(H) is 0
- lin is 0

- Variable(6) is G
- g.coefficient(G) is 0
- lin is 0

- Variable(5) is F
- g.coefficient(F) is 0
- lin is 0

- Variable(4) is E
- g.coefficient(E) is 0
- lin is 0

- Variable(3) is D
- g.coefficient(D) is 0
- lin is 0

- Variable(2) is C
- g.coefficient(C) is 0
- lin is 0

- Variable(1) is B
- g.coefficient(B) is 0
- lin is 0

- Variable(0) is A
- g.coefficient(A) is 0
- lin is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(0) is A
- l is 0
- i is 0
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(1) is B
- l is 0
- i is 1
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(2) is C
- l is 0
- i is 2
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(3) is D
- l is 0
- i is 3
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(4) is E
- l is 0
- i is 4
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(5) is F
- l is 0
- i is 5
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(6) is G
- l is 0
- i is 6
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(7) is H
- l is 0
- i is 7
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(8) is I
- l is 0
- i is 8
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(9) is J
- l is 0
- n is 9
- c is 0
- lin1 is 0
l0=>0(add_to_invariant!)>=0
invariant is B + C + D + G - I = 0, A + B + D + E + F - H = 0, G >= 0, F >= 0, E >= 0, C >= 0, B >= 0, B + C + D + G >= 1, A >= 0, A + B + D + E + F >= 1

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is r(J)

- g.space_dimension() is 10

- Variable(9) is J
- g.coefficient(J) is 1
- lin is J

- Variable(8) is I
- g.coefficient(I) is 0
- lin is J

- Variable(7) is H
- g.coefficient(H) is 0
- lin is J

- Variable(6) is G
- g.coefficient(G) is 0
- lin is J

- Variable(5) is F
- g.coefficient(F) is 0
- lin is J

- Variable(4) is E
- g.coefficient(E) is 0
- lin is J

- Variable(3) is D
- g.coefficient(D) is 0
- lin is J

- Variable(2) is C
- g.coefficient(C) is 0
- lin is J

- Variable(1) is B
- g.coefficient(B) is 0
- lin is J

- Variable(0) is A
- g.coefficient(A) is 0
- lin is J

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(0) is A
- l is 0
- i is 0
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(1) is B
- l is 0
- i is 1
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(2) is C
- l is 0
- i is 2
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(3) is D
- l is 0
- i is 3
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(4) is E
- l is 0
- i is 4
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(5) is F
- l is 0
- i is 5
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(6) is G
- l is 0
- i is 6
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(7) is H
- l is 0
- i is 7
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(8) is I
- l is 0
- i is 8
- c is 0
- lin1 is 0

- handle_integers(1) is 1
- lin.coefficient(Variable(l+i)) is 1
- Variable(9) is J
- l is 0
- n is 9
- c is 1
- lin1 is 1
l0=> + 1(add_to_invariant!)>=0
invariant is B + C + D + G - I = 0, A + B + D + E + F - H = 0, G >= 0, F >= 0, E >= 0, C >= 0, B >= 0, B + C + D + G >= 1, A >= 0, A + B + D + E + F >= 1

- In extract_invariant_and_update(C_Polyhedron & pp, & dualp) : 

- For location l0

- pp is I = 0, H = 0, G = 0, F = 0, E = 0, C = 0, B = 0, A = 0, D >= 0, J >= 0

- pp.minimized_generators() is r(D), p(0), r(J)

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is r(D)

- g.space_dimension() is 10

- Variable(9) is J
- g.coefficient(J) is 0
- lin is 0

- Variable(8) is I
- g.coefficient(I) is 0
- lin is 0

- Variable(7) is H
- g.coefficient(H) is 0
- lin is 0

- Variable(6) is G
- g.coefficient(G) is 0
- lin is 0

- Variable(5) is F
- g.coefficient(F) is 0
- lin is 0

- Variable(4) is E
- g.coefficient(E) is 0
- lin is 0

- Variable(3) is D
- g.coefficient(D) is 1
- lin is D

- Variable(2) is C
- g.coefficient(C) is 0
- lin is D

- Variable(1) is B
- g.coefficient(B) is 0
- lin is D

- Variable(0) is A
- g.coefficient(A) is 0
- lin is D

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(0) is A
- l is 0
- i is 0
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(1) is B
- l is 0
- i is 1
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(2) is C
- l is 0
- i is 2
- c is 0
- lin1 is 0

- handle_integers(1) is 1
- lin.coefficient(Variable(l+i)) is 1
- Variable(3) is D
- l is 0
- i is 3
- c is 1
- lin1 is D

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(4) is E
- l is 0
- i is 4
- c is 0
- lin1 is D

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(5) is F
- l is 0
- i is 5
- c is 0
- lin1 is D

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(6) is G
- l is 0
- i is 6
- c is 0
- lin1 is D

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(7) is H
- l is 0
- i is 7
- c is 0
- lin1 is D

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(8) is I
- l is 0
- i is 8
- c is 0
- lin1 is D

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(9) is J
- l is 0
- n is 9
- c is 0
- lin1 is D
l0=>1*x4 (add_to_invariant!)>=0
invariant is B + C + D + G - I = 0, A + B + D + E + F - H = 0, G >= 0, F >= 0, E >= 0, C >= 0, B >= 0, B + C + D + G >= 1, A >= 0, A + B + D + E + F >= 1, D >= 0

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is p(0)

- g.space_dimension() is 10

- Variable(9) is J
- g.coefficient(J) is 0
- lin is 0

- Variable(8) is I
- g.coefficient(I) is 0
- lin is 0

- Variable(7) is H
- g.coefficient(H) is 0
- lin is 0

- Variable(6) is G
- g.coefficient(G) is 0
- lin is 0

- Variable(5) is F
- g.coefficient(F) is 0
- lin is 0

- Variable(4) is E
- g.coefficient(E) is 0
- lin is 0

- Variable(3) is D
- g.coefficient(D) is 0
- lin is 0

- Variable(2) is C
- g.coefficient(C) is 0
- lin is 0

- Variable(1) is B
- g.coefficient(B) is 0
- lin is 0

- Variable(0) is A
- g.coefficient(A) is 0
- lin is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(0) is A
- l is 0
- i is 0
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(1) is B
- l is 0
- i is 1
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(2) is C
- l is 0
- i is 2
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(3) is D
- l is 0
- i is 3
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(4) is E
- l is 0
- i is 4
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(5) is F
- l is 0
- i is 5
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(6) is G
- l is 0
- i is 6
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(7) is H
- l is 0
- i is 7
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(8) is I
- l is 0
- i is 8
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(9) is J
- l is 0
- n is 9
- c is 0
- lin1 is 0
l0=>0(add_to_invariant!)>=0
invariant is B + C + D + G - I = 0, A + B + D + E + F - H = 0, G >= 0, F >= 0, E >= 0, D >= 0, C >= 0, B >= 0, B + C + D + G >= 1, A >= 0, A + B + D + E + F >= 1

- In extract_invariant_from_generator(Generator const & g): 

- Generator const & g is r(J)

- g.space_dimension() is 10

- Variable(9) is J
- g.coefficient(J) is 1
- lin is J

- Variable(8) is I
- g.coefficient(I) is 0
- lin is J

- Variable(7) is H
- g.coefficient(H) is 0
- lin is J

- Variable(6) is G
- g.coefficient(G) is 0
- lin is J

- Variable(5) is F
- g.coefficient(F) is 0
- lin is J

- Variable(4) is E
- g.coefficient(E) is 0
- lin is J

- Variable(3) is D
- g.coefficient(D) is 0
- lin is J

- Variable(2) is C
- g.coefficient(C) is 0
- lin is J

- Variable(1) is B
- g.coefficient(B) is 0
- lin is J

- Variable(0) is A
- g.coefficient(A) is 0
- lin is J

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(0) is A
- l is 0
- i is 0
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(1) is B
- l is 0
- i is 1
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(2) is C
- l is 0
- i is 2
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(3) is D
- l is 0
- i is 3
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(4) is E
- l is 0
- i is 4
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(5) is F
- l is 0
- i is 5
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(6) is G
- l is 0
- i is 6
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(7) is H
- l is 0
- i is 7
- c is 0
- lin1 is 0

- handle_integers(0) is 1
- lin.coefficient(Variable(l+i)) is 0
- Variable(8) is I
- l is 0
- i is 8
- c is 0
- lin1 is 0

- handle_integers(1) is 1
- lin.coefficient(Variable(l+i)) is 1
- Variable(9) is J
- l is 0
- n is 9
- c is 1
- lin1 is 1
l0=> + 1(add_to_invariant!)>=0
invariant is B + C + D + G - I = 0, A + B + D + E + F - H = 0, G >= 0, F >= 0, E >= 0, D >= 0, C >= 0, B >= 0, B + C + D + G >= 1, A >= 0, A + B + D + E + F >= 1
strategy ID 2 ending (num_context==2)
----------------------------------------------

5.
The locations read in are:

Location:l0
# of variables9
 Initial Condition: [[ 

1*x7 -1*q   = 0 
1*x6 -1*p   = 0 
1*x5   = 0 
1*x4   = 0 
1*x3   = 0 
1*x2   = 0 
1*x1   = 0 
1*x7 -1 >= 0
1*x6 -1 >= 0

]]
 Invariant: [[ 

1*x2 +1*x3 +1*x4 +1*x7 -1*q   = 0 
1*x1 +1*x2 +1*x4 +1*x5 +1*x6 -1*p   = 0 
1*x7  >= 0
1*x6  >= 0
1*x5  >= 0
1*x4  >= 0
1*x3  >= 0
1*x2  >= 0
1*x2 +1*x3 +1*x4 +1*x7 -1 >= 0
1*x1  >= 0
1*x1 +1*x2 +1*x4 +1*x5 +1*x6 -1 >= 0

]]
----------------------------------------------
 # of Contexts generated =36
 # pruned by inclusion tests = 22
 # of invariants *weav*ed=7
 #  *bang*ed=0
 # Pruned in Cump.cc =0
 Time Taken (0.01S)=7


 Doing Initial Propagation
Propagation done -- Time Taken (0.01S):0
---- Running Cousot-Halbwachs with H79 widening ----
 The computed invariant map is 
 Location:l0
 [[ 
1*x2 +1*x3 +1*x4 +1*x7 -1*q   = 0 
1*x1 +1*x2 +1*x4 +1*x5 +1*x6 -1*p   = 0 
1*x1  >= 0
1*x3  >= 0
1*x1 +1*x2 +1*x4 +1*x6 +1*x7 -1 >= 0
1*x2 +1*x3 +1*x4 +1*x7 -1 >= 0
1*x1 +1*x2 +1*x4 +1*x5 +1*x6 -1 >= 0
1*x7  >= 0
1*x6  >= 0
1*x5  >= 0
1*x4  >= 0
1*x2  >= 0

]]

Time spent propagating stuff: (0.01s) 0
Time spent widening stuff: (0.01s)0


 Time taken for Cousot-Halbwachs Widening (0.01 S)0
 The bake-off results vs. CH79
Location :l0  - 
--------------------------------------------------------
---- Running Cousot-Halbwachs with BHRZ03 widening ----
 The computed invariant map is 
 Location:l0
 [[ 
1*x2 +1*x3 +1*x4 +1*x7 -1*q   = 0 
1*x1 +1*x2 +1*x4 +1*x5 +1*x6 -1*p   = 0 
1*x2 +1*x3 +1*x4 +1*x7 -1 >= 0
1*x7  >= 0
1*x5  >= 0
1*x4  >= 0
1*x3  >= 0
1*x6  >= 0
1*x2  >= 0
1*x1 +1*x2 +1*x4 +1*x6 +1*x7 -1 >= 0
1*x1  >= 0
1*x1 +1*x2 +1*x4 +1*x5 +1*x6 -1 >= 0

]]

Time spent propagating stuff: (0.01s) 1
Time spent widening stuff: (0.01s)3


 Time taken for BHRZ03 (0.01 S)4
 The bake-off results vs. BHRZ03
Location :l0  - 
--------------------------------------------------------
 Time taken for the initial propagation (0.01 S)0
 Time taken for the quantifier elimination (0.01 S)7
 Total Time taken (0.01S) 11
